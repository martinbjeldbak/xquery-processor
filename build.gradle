plugins {
}

apply plugin: 'java'
apply plugin: 'application' // let our project be runnable
apply plugin: 'idea'
apply plugin: 'antlr'

mainClassName = 'dk.martinbmadsen.xquery.main.Main'
sourceCompatibility = 1.8
version = '1.0'

def genSrcPath = 'target/generated-sources'
def antlrGenPath = genSrcPath + '/antlr'
def grammarGenPath = antlrGenPath + '/dk/martinbmadsen/xquery/parser' // path where antlr4 code is generated

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile 'org.jdom:jdom2:2.0.6'
    antlr   'org.antlr:antlr4:4.5'
}

defaultTasks 'clean', 'run'

clean {
    // Remove any antlr-generated files
    delete antlrGenPath
}

// Have antlr task generate Java classes to another directory
generateGrammarSource {
    outputDirectory = file(grammarGenPath)
}

idea {
    module {
        // Add antlr as source for generated files
        sourceDirs += file(antlrGenPath)
        generatedSourceDirs += file(antlrGenPath)
    }
}

task fatJar(type: Jar) {
    // Src: http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File ',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}