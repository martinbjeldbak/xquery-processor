plugins {
}

apply plugin: 'java'
apply plugin: 'application' // let this project be runnable
apply plugin: 'idea'
apply plugin: 'antlr'

mainClassName = 'dk.martinbmadsen.xquery.main.Main'
sourceCompatibility = 1.8
version = '1.0'

def genSrcPath = 'target/generated-sources'
def antlrGenPath = genSrcPath + '/antlr'
def grammarGenPath = antlrGenPath + '/dk/martinbmadsen/xquery/parser' // path where antlr4 code is generated

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

sourceSets.main.java.srcDir genSrcPath
sourceSets.test.java.srcDir genSrcPath

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile 'org.jdom:jdom2:2.0.6'
    antlr   'org.antlr:antlr4:4.5'
}

clean.delete genSrcPath // Remove any auto-generated source files (Java classes/interfaces/etc)

// Antlr grammar generation
generateGrammarSource.outputDirectory = file(grammarGenPath)

// Intellij IDEA config

idea.module.sourceDirs += file(antlrGenPath) // Add folder with generated source files to src
idea.module.generatedSourceDirs += file(antlrGenPath) // Set same folder as a 'generated source' code folder

task fatJar(type: Jar) {
    // Src: http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File ',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}